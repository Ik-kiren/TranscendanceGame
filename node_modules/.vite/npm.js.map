{
  "version": 3,
  "sources": ["../npm/lib/cli/validate-engines.js", "browser-external:node:path", "../npm/lib/cli.js", "../npm/index.js", "dep:npm"],
  "sourcesContent": ["// This is separate to indicate that it should contain code we expect to work in\n// all versions of node >= 6.  This is a best effort to catch syntax errors to\n// give users a good error message if they are using a node version that doesn't\n// allow syntax we are using such as private properties, etc. This file is\n// linted with ecmaVersion=6 so we don't use invalid syntax, which is set in the\n// .eslintrc.local.json file\n\nconst { engines: { node: engines }, version } = require('../../package.json')\nconst npm = `v${version}`\n\nmodule.exports = (process, getCli) => {\n  const node = process.version\n\n  /* eslint-disable-next-line max-len */\n  const unsupportedMessage = `npm ${npm} does not support Node.js ${node}. This version of npm supports the following node versions: \\`${engines}\\`. You can find the latest version at https://nodejs.org/.`\n\n  /* eslint-disable-next-line max-len */\n  const brokenMessage = `ERROR: npm ${npm} is known not to run on Node.js ${node}.  This version of npm supports the following node versions: \\`${engines}\\`. You can find the latest version at https://nodejs.org/.`\n\n  // coverage ignored because this is only hit in very unsupported node versions\n  // and it's a best effort attempt to show something nice in those cases\n  /* istanbul ignore next */\n  const syntaxErrorHandler = (err) => {\n    if (err instanceof SyntaxError) {\n      // eslint-disable-next-line no-console\n      console.error(`${brokenMessage}\\n\\nERROR:`)\n      // eslint-disable-next-line no-console\n      console.error(err)\n      return process.exit(1)\n    }\n    throw err\n  }\n\n  process.on('uncaughtException', syntaxErrorHandler)\n  process.on('unhandledRejection', syntaxErrorHandler)\n\n  // require this only after setting up the error handlers\n  const cli = getCli()\n  return cli(process, {\n    node,\n    npm,\n    engines,\n    unsupportedMessage,\n    off: () => {\n      process.off('uncaughtException', syntaxErrorHandler)\n      process.off('unhandledRejection', syntaxErrorHandler)\n    },\n  })\n}\n", "export default new Proxy({}, {\n  get() {\n    throw new Error('Module \"node:path\" has been externalized for browser compatibility and cannot be accessed in client code.')\n  }\n})", "const validateEngines = require('./cli/validate-engines.js')\nconst cliEntry = require('node:path').resolve(__dirname, 'cli/entry.js')\n\nmodule.exports = (process) => validateEngines(process, () => require(cliEntry))\n", "if (require.main === module) {\n  require('./lib/cli.js')(process)\n} else {\n  throw new Error('The programmatic API was removed in npm v8.0.0')\n}\n", "export default require(\"./node_modules/npm/index.js\");"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAOA,QAAM,EAAE,SAAS,EAAE,MAAM,WAAW,YAAY;AAChD,QAAM,MAAM,IAAI;AAEhB,WAAO,UAAU,CAAC,UAAS,WAAW;AACpC,YAAM,OAAO,SAAQ;AAGrB,YAAM,qBAAqB,OAAO,gCAAgC,qEAAqE;AAGvI,YAAM,gBAAgB,cAAc,sCAAsC,sEAAsE;AAKhJ,YAAM,qBAAqB,CAAC,QAAQ;AAClC,YAAI,eAAe,aAAa;AAE9B,kBAAQ,MAAM,GAAG;AAAA;AAAA;AAEjB,kBAAQ,MAAM;AACd,iBAAO,SAAQ,KAAK;AAAA;AAEtB,cAAM;AAAA;AAGR,eAAQ,GAAG,qBAAqB;AAChC,eAAQ,GAAG,sBAAsB;AAGjC,YAAM,MAAM;AACZ,aAAO,IAAI,UAAS;AAAA,QAClB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,KAAK,MAAM;AACT,mBAAQ,IAAI,qBAAqB;AACjC,mBAAQ,IAAI,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;;;AC7CxC;AAAA;AAAA;AAAA;AAAA,IAAO;AAAP;AAAA;AAAA,IAAO,oBAAQ,IAAI,MAAM,IAAI;AAAA,MAC3B,MAAM;AACJ,cAAM,IAAI,MAAM;AAAA;AAAA;AAAA;AAAA;;;ACFpB;AAAA;AAAA,QAAM,kBAAkB;AACxB,QAAM,WAAW,sCAAqB,QAAQ,WAAW;AAEzD,WAAO,UAAU,CAAC,aAAY,gBAAgB,UAAS,MAAM,UAAQ;AAAA;AAAA;;;ACHrE;AAAA;AAAA,QAAI,UAAQ,SAAS,QAAQ;AAC3B,oBAAwB;AAAA,WACnB;AACL,YAAM,IAAI,MAAM;AAAA;AAAA;AAAA;;;ACHlB,IAAO,cAAQ;",
  "names": []
}
