import * as THREE from '../lib/three.module.min.js';

const RESSOURCES = "../../";

const songs = {
    SHOW: 0,
    MONSTER: 1,
    DVALIN: 2
}

const songsArray = [
    [[6, -1, 2], [10, 1, 2], [18, 0], [20, 0], [20.5, -1], [21, 1], [21.5, 0], [22, -1], [24, 1], [25, 0], [26, -1], [30, 0], [31, -1], [32, 0], [33, 0], [34, 0],
    [34.5, -1], [35, 0], [35.5, 1], [36, 0], [36.5,-1], [37, 0], [37.5, 1], [38, 0], [38.5, -1], [39, 0], [39.5, 1], [40, 0], [40.5, -1], [41, 0], [41.5, 1], [42, 0],
    [42.5, -1], [43, 0], [43.5, 1], [44, 0], [46, 1], [46, -1], [47, 1], [47, -1], [48, 1], [48, -1], [50, 1], [51, 0], [51.25, 1], [52, 1],
    [53, 0], [53.25, 1], [54, 1], [55, 0], [55.25, 1], [56, 1], [57, 0], [57.25, 1], [58, 1], [59, 0], [59.25, 1], [60, 1], [61, 0], [61.25, 1], [62, 1], [63, 0], [63.25, 1], [64, 1], [65, 0], [65.25, 1], [66, 1], [67, 0],
    [67.25, 1], [68, 1], [69, 0], [69.25, 1], [70, 1], [70, 0], [71, 1], [71, 0], [71.5, 1], [71.5, 0], [72, 1], [72, 0], [73, -1], [74, 0], [74.25, -1], [75, -1], [76, 0], [76.25, -1], [77, -1], [78, 0],
    [78.25, -1], [79, 0], [79.5, 0], [82, 1], [83, 0], [83.25, 1], [84, 1], [85, 0], [85.25, 1], [86, 1], [87, 0], [87.25, 1], [88, 1], [89, 0], [89.25, 1], [90, 1], [91, 0], [91.25, 1], [92, 1], [93, 0], [93.25, 1],
    [94, 1], [95, 0], [95.5, 1], [96, 1], [97, 0], [97.25, 1], [98, 1], [99, 0], [99.25, 1], [100, 1], [101, 0], [101.25, 1], [102, 1], [103, 0], [103.25, 1], [104, 1], [105, 0], [105.25, 1], [106, 1], [107, 0],
    [107.25, 1], [108, 1], [109, 0], [109.25, 1], [110.5, 1, 3], [114, 0], [115, 0], [116, 0], [117, 0], [118, 0], [119, 0], [120, 0], [121, 0], [122, 0], [123, 0], [124, 0], [125, 0], [126, 0],
    [127, 0], [128, 0], [129, 0], [130, 0], [131, 0], [132, 0], [133, 0], [134, 0], [135, 0], [136, 0], [137, 0], [138, 0], [139, 0], [140, 0], [141, 0], [143, 0], [143, -1], [143, 1], [143.5, 0], [143.5, -1], [143.5, 1],
    [144, 0], [144, 1], [144, -1], [144.5, 0], [144.5, 1], [144.5, -1], [146, -1], [147, 0], [147.25, -1], [148, -1], [149, 0], [149.25, -1], [150, -1], [151, 0], [151.25, -1], [152, -1], [153, 0], [153.25, -1], [154, -1],
    [155, 0], [155.25, -1], [156, -1], [157, 0], [157.25, -1], [158, -1], [159, 0], [159.25, -1], [160, -1], [161, 0], [161.25, -1], [162, -1], [163, 0], [163.25, -1], [164, -1], [165, 0], [165.25, -1], [166, -1], [167, 0], [167.25, -1],
    [168, -1], [169, 0], [169.25, -1], [170, -1], [171, 0], [171.25, -1], [172, -1], [173, 0], [173.25, -1], [174, -1], [175, 0], [175.25, -1], [176, -1], [177, 0], [177.25, -1], [178, -1], [179, 0], [179.25, -1], [180, -1], [181, 0], [181.25, -1],
    [182, -1], [183, 0], [183.25, -1], [184, -1], [185, 0], [185.25, -1], [186, -1], [187, 0], [187.25, -1], [188, -1], [189, 0], [189.25, -1], [190, 1], [190.5, 1], [191, 1], [191.5, 1], [192, 1], [193, -1], [194, 0], [194.25, -1],
    [195, -1], [196, 0], [196.25, -1], [197, -1], [198, 0], [198.25, -1], [199, -1], [200, 0], [200.25, -1], [201, -1], [202, 0], [202.25, -1], [203, -1], [204, 0], [204.25, -1], [205, -1], [206, 0], [206.25, -1], [207, -1], [208, 0], [208.25, -1],
    [209, 0], [210, 1], [210.5, -1], [211, 1], [211.5, -1], [212, 1], [213, -1], [213.5, 1], [214, -1], [214.5, 1], [215, -1], [215.5, 1], [216, -1], [217, 1], [217.5, -1], [218, 1], [218.5, -1], [219, 1], [219.5, -1], [220, 1], [221, 1], [221.5, -1],
    [226, -1], [226.5, 1], [227, -1], [227.5, 1], [228, -1], [229, 1], [229.5, -1], [230, 1], [230.5, -1], [231, 1], [231.5, -1], [232, 1], [233, -1], [233.5, 1],
    [234, -1], [234.5, 1], [235, -1], [235.5, 1], [236, -1], [237.5, 0, 2],
    [278, 0, 2], [282, 1, 2], [286, -1, 2], [294, 1, 2], [298, 0, 2], [302, 1, 2], [310, 0], [311, 1], [312, 1], [314.5, 0], [316, 0], [316.5, 1], [318, 0], [319.5, 1], [320, 1], [323, 0], [324, 1], [324.5, 1], [326, 0], [327.5, 1], [328, 0],[331, 1], [332, 0], [334, 1], [335, 0], [335, 1],
    [342, 0], [343, -1], [343.25, 1], [344, 0], [345, -1], [345.25, 1], [346, 0], [347, -1], [347.25, 1], [348, 0], [349, -1], [349.25, 1],
    [350, 0], [351, -1], [351.25, 1], [352, 0], [353, -1], [353.25, 1], [354, 0], [355, -1], [355.25, 1], [356, 0], [357, -1], [357.25, 1], [358, 0], [359, -1], [359.25, 1], [360, 0], [361, -1], [361.25, 1], [362, 0], [363, -1], [363.25, 1],
    [364, 0], [365, -1], [365.25, 1], [366, 0], [367, -1], [367.25, 1], [368, 0], [369, -1], [369.25, 1], [370, 0], [371, -1], [371.25, 1], [372, 0], [373, -1], [373.25, 1], [374, 0], [375, -1], [375.25, 1], [376, 0], [377, -1], [377.25, 1],
    [378, 0], [379, -1], [379.25, 1], [380, 0], [381, -1], [381.25, 1], [382, 0], [383, -1], [383.25, 1], [384, 0], [385, -1], [385.25, 1], [386, 0], [387, -1], [387.25, 1], [388, 0], [389, -1], [389.25, 1], [390, 0], [391, -1], [391.25, 1],
    [392, 0], [393, -1], [393.25, 1], [394, 0], [395, -1], [395.25, 1], [396, 0], [397, -1], [397.25, 1], [398, 0], [399, -1], [399.25, 1], [400, 0], [401, -1], [401.25, 1], [402, 0], [403, -1], [403.25, 1], [404, 0], [405, -1], [405.25, 1],
    [406, 0], [407, -1], [407.25, 1], [408, 0], [409, -1], [409.25, 1], [410, 0], [411, -1], [411.25, 1]],
    [],
    [[8, 0], [11, 0], [14, 0], [17, 0], [20, 0], [24, 0], [27, 0], [30, 0], [37, 0], [40, 0], [47, 0], [50, 0], [53, 0], [56, 0], [59, 0],
    [60, 1, 2], [61, 0, 2], [62, -1, 2], [63, 0, 2], [64, 1, 2], [66, -1, 2], [68, 1 , 3], [72, 0, 2], [73, -1, 2], [74, 1, 2], [75, 0, 2], [76, -1, 2], [77, 1, 2], [78, 0, 2], [80, -1, 2], [80.5, 1, 2], [81, 0, 3],
    [84, 0], [87, 0], [90, 0], [94, 0], [96, 0], [99, 0], [103, 0], [105, 0], [109, 0], [111, 0], [114, 0], [120, 0], [123, 0], [126, 0], [131, 0], [132, 0],
    [133, 0, 1], [134, 1, 1], [135, -1, 1], [136, 0, 1], [137, 1, 1], [138, -1, 1], [139, 0, 3], [141, 1, 2], [142, -1, 1], [144, 0, 2], [144.5, 1, 2], [147, -1, 2], [149, 0, 2], [150, 1, 3], [151, -1, 2],
    [153, 0, 2], [153.5, 1, 2], [157, -1, 2], [158, 0, 2], [159, 1, 2], [160, -1, 2], [161, 0, 2], [162, 1, 2], [163, -1, 2], [164, 0, 2], [165, 1, 2], [166, -1, 2], [167, 0, 2], [168, 1, 2], [169, -1, 2],
    [170, 0, 1], [171, 1, 1], [172, -1, 1], [173, 0, 1], [174, 1, 1], [175, -1, 2], [177, 1, 2], [178, -1, 2], [179, 0, 2], [182, 1, 1], [183, -1, 1], [184, 0, 1], [185, 1, 1], [186, -1, 1], [187, 0, 1],
    [190, 1, 1], [191, -1, 1], [192, 0, 1], [193, 1, 1], [195, 0, 1], [197, -1, 1],[198, 0, 1], [199, 1, 1],[201, -1, 1], [202, 0, 1]]
]

function fillSongMonster() {
    for (let i = 115; i <= 985; i++) {
        let pos = Math.floor(Math.random() * (2 + 1) - 1);
        songsArray[1].push([i, pos]);
    }
}

export default class Audio {
    constructor (choosedSong){
        this.musicListener = new THREE.AudioListener();
        this.music = new THREE.Audio(this.musicListener);
        this.musicLoader = new THREE.AudioLoader();

        this.analyzer = new THREE.AudioAnalyser(this.music, 32);
        if (choosedSong == songs.SHOW)
            this.secperbeat = 60 / 132;
        else if (choosedSong == songs.MONSTER)
            this.secperbeat = 60 / 170;
        else if (choosedSong == songs.DVALIN)
            this.secperbeat = 60 / 94;
        this.lastsp = 0;
        this.clockBPM = new THREE.Clock(false);

        if (choosedSong == songs.SHOW)
            this.currentSong = songsArray[songs.SHOW];
        else if (choosedSong == songs.MONSTER)
            this.currentSong = songsArray[songs.MONSTER];
        else if (choosedSong == songs.DVALIN)
            this.currentSong = songsArray[songs.DVALIN];
        this.nextNote = 0;
        this.songposinbeat = 0;
        this.timerBeat;
    };

    loadMusic(choosedSong) {
        if (choosedSong == songs.SHOW) {
            this.musicLoader.load(RESSOURCES + 'ado.mp3', (buffer) => {
                this.music.setBuffer(buffer);
                this.music.setVolume(0.04);
                window.addEventListener('click', () => {
                    if (this.music.isPlaying == false) {
                        this.music.play();
                        this.clockBPM.start();
                    }
                }, undefined, function (error) {
                    console.log(error);
                });
            });
        } else if (choosedSong == songs.MONSTER) {
            fillSongMonster();
            this.musicLoader.load(RESSOURCES + 'monster.mp3', (buffer) => {
                this.music.setBuffer(buffer);
                this.music.setVolume(0.04);
                window.addEventListener('click', () => {
                    if (this.music.isPlaying == false) {
                        this.music.play();
                        this.clockBPM.start();
                    }
                }, undefined, function (error) {
                    console.log(error);
                });
            });
        } else if (choosedSong == songs.DVALIN) {
            this.musicLoader.load(RESSOURCES + 'dvalin.mp3', (buffer) => {
                this.music.setBuffer(buffer);
                this.music.setVolume(0.04);
                this.music.offset = 80;
                window.addEventListener('click', () => {
                    if (this.music.isPlaying == false) {
                        this.music.play();
                        this.clockBPM.start();
                    }
                }, undefined, function (error) {
                    console.log(error);
                });
            });
        };
    };
}